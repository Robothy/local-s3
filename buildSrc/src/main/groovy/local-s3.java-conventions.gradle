plugins {
    id 'java'
    id 'jacoco'
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()

    maven {
        url 'https://maven.pkg.github.com/robothy-platform/maven'
        credentials {
            username = "${GITHUB_USERNAME}"
            password = "${GITHUB_TOKEN}"
        }
    }


//    maven { url 'https://maven.aliyun.com/repository/google/' }
//    maven { url 'https://maven.aliyun.com/repository/public/' }
//    maven { url 'https://maven.aliyun.com/repository/spring/' }
//    maven { url 'https://maven.aliyun.com/repository/gradle-plugin/' }
//    maven { url 'https://maven.aliyun.com/repository/spring-plugin/' }

}

project.group = 'io.github.robothy'

// Load version
ext {
    libVersion = new Properties()
    def versionFile = new File("${project.rootProject.rootDir}/buildSrc/src/main/resources/version.properties")
    ext.libVersion.load(versionFile.newInputStream())
}

dependencies {
    implementation "org.slf4j:slf4j-api:${libVersion['org.slf4j.slf4j-api']}"
    compileOnly "org.projectlombok:lombok:${libVersion['org.projectlombok.lombok']}"
    annotationProcessor "org.projectlombok:lombok:${libVersion['org.projectlombok.lombok']}"
    testCompileOnly "org.projectlombok:lombok:${libVersion['org.projectlombok.lombok']}"
    testAnnotationProcessor "org.projectlombok:lombok:${libVersion['org.projectlombok.lombok']}"
    testImplementation "org.mockito:mockito-inline:${libVersion['org.mockito.mockito-inline']}"
    testImplementation "org.junit.jupiter:junit-jupiter:${libVersion['org.junit.jupiter.junit-jupiter']}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${libVersion['org.junit.jupiter.junit-jupiter-engine']}"
}

test {
    useJUnitPlatform()
}

jacocoTestReport {
    reports {
        xml.required.set(true)
        html.required.set(true)
    }
}

jar {
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
}

tasks.compileJava {
    options.encoding = "UTF-8"
}

tasks.compileTestJava {
    options.encoding = "UTF-8"
}

java {
//    toolchain {
//        languageVersion = JavaLanguageVersion.of(8)
//    }
    sourceCompatibility(8)
    targetCompatibility(8)
}