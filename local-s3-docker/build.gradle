import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform


plugins {
    id 'local-s3.java-conventions'
}

dependencies {
    implementation(project(":local-s3-rest"))
    runtimeOnly "ch.qos.logback:logback-classic:${libVersion['ch.qos.logback.logback-classic']}"
    testImplementation(project(":local-s3-testcontainers"))
    testImplementation("org.testcontainers:testcontainers:${libVersion['org.testcontainers.testcontainers']}")
    testImplementation "org.testcontainers:junit-jupiter:${libVersion['org.testcontainers.junit-jupiter']}"
    testImplementation "software.amazon.awssdk:s3:${libVersion['software.amazon.awssdk.s3']}"
    testImplementation "com.amazonaws:aws-java-sdk:${libVersion['com.amazonaws.aws-java-sdk']}"
}

jar {
    manifest.attributes["Main-Class"] = "com.robothy.s3.docker.App"
    var runtimeClasses = configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    from runtimeClasses
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    archiveFileName.set("s3.jar")
}

def os = DefaultNativePlatform.getCurrentOperatingSystem()
def executor = os.isWindows() ? Arrays.asList("cmd", "/c") : Arrays.asList("sh", "-c")

tasks.register('collectReachabilityMetadata', JavaExec) {
    group('native-image')
    dependsOn('jar')

    outputs.cacheIf { true }

    inputs.file("${buildDir}/libs/s3.jar")
            .withPropertyName("jar")
            .withPathSensitivity(PathSensitivity.RELATIVE)

    outputs.dir(file("${buildDir}/reachability-metadata"))
            .withPropertyName("reachability-metadata")

    mainClass.set('com.robothy.s3.docker.ReachabilityMetadataGenerator')
    classpath = sourceSets.test.runtimeClasspath + sourceSets.main.runtimeClasspath
}

tasks.register('buildGraalVMNativeImage', Exec) {
    group('native-image')
    dependsOn('collectReachabilityMetadata')

    outputs.cacheIf { true }
    inputs.dir(file("${buildDir}/reachability-metadata"))
            .withPropertyName("reachability-metadata")
            .withPathSensitivity(PathSensitivity.RELATIVE)
    inputs.file("${buildDir}/libs/s3.jar")
            .withPropertyName("jar")
            .withPathSensitivity(PathSensitivity.RELATIVE)
    outputs.file("${buildDir}/bin/s3")
            .withPropertyName("s3-native-image")

    doFirst {
        var cmd = new ArrayList(executor)
        var buildCmd = """docker run --rm \
-v ${project.projectDir}:/project \
-v ${project.buildDir}/bin:/app \
ghcr.io/graalvm/native-image:ol9-java17-22.3.0 \
-jar /project/build/libs/s3.jar \
--initialize-at-build-time=ch.qos.logback,org.slf4j \
--install-exit-handlers \
--class-path /project/build/reachability-metadata
"""
        cmd.add(buildCmd)
        commandLine(cmd)
    }
}

tasks.register('buildGraalVMNativeBasedDockerImage', Exec) {
    group("docker-image")
    dependsOn('buildGraalVMNativeImage')

    outputs.cacheIf { true }

    inputs.file("${buildDir}/bin/s3")
            .withPropertyName("s3-native-image")
            .withPathSensitivity(PathSensitivity.RELATIVE)

    doFirst {
        var cmd = new ArrayList(executor)
        cmd.add("docker build -t luofuxiang/local-s3:native-${project.version} -f GraalVMNativeImage.dockerfile .")
        commandLine(cmd)
    }
}

tasks.register('buildJava17BasedDockerImage', Exec) {
    group("docker-image")
    dependsOn('jar')

    doFirst {
        var cmd = new ArrayList(executor)
        cmd.add("docker build -t luofuxiang/local-s3:latest -t luofuxiang/local-s3:${project.version} .")
        commandLine(cmd)
    }
}


tasks.register('buildDockerImages') {
    group("docker-image")
    dependsOn ('buildGraalVMNativeBasedDockerImage', 'buildJava17BasedDockerImage')
    description = "Builds the docker images"
}

tasks.test.dependsOn(buildDockerImages)

tasks.register('pushJava17BasedDockerImage', Exec) {
    dependsOn 'test'
    group("docker-image")
    doFirst {
        var cmd = new ArrayList(executor)
        cmd.add("docker push luofuxiang/local-s3:${project.version}")
        commandLine(cmd)
    }
}

tasks.register('pushGraalVMNativeBasedDockerImage', Exec) {
    dependsOn 'test'
    group("docker-image")
    doFirst {
        var cmd = new ArrayList(executor)
        cmd.add("docker push luofuxiang/local-s3:native-${project.version}")
        commandLine(cmd)
    }
}

tasks.register('pushLatestImage', Exec) {
    dependsOn 'test'
    group("docker-image")
    doFirst {
        var cmd = new ArrayList(executor)
        cmd.add("docker push luofuxiang/local-s3:latest")
        commandLine(cmd)
    }
}


rootProject.tasks.release.dependsOn(pushLatestImage, pushJava17BasedDockerImage, pushGraalVMNativeBasedDockerImage)